<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2016 Goldman Sachs.

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.

    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.goldmansachs.jdmn</groupId>
        <artifactId>jdmn-signavio-integration-tests</artifactId>
        <version>4.2.1-SNAPSHOT</version>
    </parent>

    <artifactId>jdmn-signavio-integration-tests-kotlin-translator</artifactId>
	<name>jDMN: Signavio Integration Tests Kotlin Translator</name>
    <packaging>jar</packaging>

    <properties>
        <kotlin.version>1.4.10</kotlin.version>
        <kotlin.code.style>official</kotlin.code.style>
        <kotlin.compiler.languageVersion>1.4</kotlin.compiler.languageVersion>
        <kotlin.compiler.jvmTarget>1.8</kotlin.compiler.jvmTarget>
        <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
        <kotlin.jackson.version>${jackson.version}</kotlin.jackson.version>

        <line.coverage.minimum>0.00</line.coverage.minimum>
        <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>  <!-- not deploying this module to Maven central -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>

        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit</artifactId>
            <version>${kotlin.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>jmh</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-jar</id>
                                <phase>package</phase>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <version>3.2.1</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                                <configuration>
                                    <finalName>benchmarks</finalName>
                                    <transformers>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                            <mainClass>org.openjdk.jmh.Main</mainClass>
                                        </transformer>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                                    </transformers>
                                    <filters>
                                        <filter>
                                            <!--
                                                Shading signed JARs will fail without this.
                                                http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                                            -->
                                            <artifact>*:*</artifact>
                                            <excludes>
                                                <exclude>META-INF/*.SF</exclude>
                                                <exclude>META-INF/*.DSA</exclude>
                                                <exclude>META-INF/*.RSA</exclude>
                                            </excludes>
                                        </filter>
                                    </filters>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.4.1.Final</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>com.goldmansachs.jdmn</groupId>
                <artifactId>jdmn-maven-plugin</artifactId>
                <version>${project.parent.version}</version>
                <configuration>
                    <dmnDialect>com.gs.dmn.signavio.dialect.KotlinSignavioDMNDialectDefinition</dmnDialect>
                    <dmnTransformers>
                        <dmnTransformer>com.gs.dmn.signavio.transformation.RuleDescriptionTransformer</dmnTransformer>
                    </dmnTransformers>
                    <templateProvider>com.gs.dmn.signavio.transformation.template.KotlinSignavioTreeTemplateProvider</templateProvider>
                    <inputParameters>
                        <dmnVersion>${dmn.version}</dmnVersion>
                        <modelVersion>${model.version}</modelVersion>
                        <platformVersion>${platform.version}</platformVersion>
                        <xsdValidation>false</xsdValidation>
                        <signavioSchemaNamespace>http://www.provider.com/schema/dmn/1.1/</signavioSchemaNamespace>
                    </inputParameters>
                </configuration>
                <executions>
                    <execution>
                        <id>rdf-to-dmn</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>rdf-to-dmn</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${xml.folder}</inputFileDirectory>
                            <outputFileDirectory>${generated.dmn.diagram.folder}</outputFileDirectory>
                            <inputParameters>
                                <namespace>http://www.gs.com/cip</namespace>
                                <prefix>cip</prefix>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!--
                        Decision table
                    -->
                    <execution>
                        <id>rdf-compound-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/compound-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.cd_primitive_type_inputs_sfeel_input_entries_compound_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>rdf-test-compound-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${xml.folder}/decision-table/compound-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${generated.dmn.diagram.folder}/decision-table/compound-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.cd_primitive_type_inputs_sfeel_input_entries_compound_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-compound-output-output-order-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-compound-output-output-order-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_compound_output_output_order_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-compound-output-priority-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-compound-output-priority-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_compound_output_priority_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-feel-input-entries-single-output-first-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-feel-input-entries-single-output-first-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_feel_input_entries_single_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>rdf-test-simple-decision-primitive-type-inputs-feel-input-entries-single-output-first-hit-policy</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${xml.folder}/decision-table/simple-decision-primitive-type-inputs-feel-input-entries-single-output-first-hit-policy.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-feel-input-entries-single-output-first-hit-policy.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_feel_input_entries_single_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-feel-input-entries-single-output-unique-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-feel-input-entries-single-output-unique-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_feel_input_entries_single_output_unique_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-sfeel-input-entries-single-output-first-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-sfeel-input-entries-single-output-first-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_sfeel_input_entries_single_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-sfeel-input-entries-compound-output-first-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_sfeel_input_entries_compound_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-single-output-collect-count-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-single-output-collect-count-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_single_output_collect_count_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-single-output-collect-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-single-output-collect-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_single_output_collect_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-single-output-collect-min-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-single-output-collect-min-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_single_output_collect_min_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-single-output-collect-sum-hit-policy.xml</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-single-output-collect-sum-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_single_output_collect_sum_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-inputs-single-output-priority-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-inputs-single-output-priority-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_single_output_priority_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-primitive-type-list-inputs-feel-input-entries-single-output-unique-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/decision-table/simple-decision-primitive-type-list-inputs-feel-input-entries-single-output-unique-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_primitive_type_inputs_sfeel_input_entries_compound_output_first_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!--
                        Literal
                    -->
                    <execution>
                        <id>rdf-simple-decision-feel-boolean-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/literal/simple-decision-feel-boolean-literal-expression.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_feel_boolean_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-feel-complex-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/literal/simple-decision-feel-complex-literal-expression.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_feel_complex_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-feel-date-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/literal/simple-decision-feel-date-literal-expression.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_feel_date_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>rdf-simple-decision-feel-string-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${generated.dmn.diagram.folder}/literal/simple-decision-feel-string-literal-expression.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_feel_string_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!--
                        Exported DMN
                    -->
                    <execution>
                        <id>compare-lists</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/CompareLists.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.compare_lists</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compare-lists</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/CompareLists.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/CompareLists.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.compare_lists</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>dot-product</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/DotProduct.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dot_product</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-dot-product</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/DotProduct.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/DotProduct.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dot_product</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>dot-product-proto</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/DotProduct.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dot_product_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-dot-product-proto</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/DotProduct.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/DotProduct.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dot_product_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>example-credit-decision</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <lazyEvaluationDetectors>
                                <lazyEvaluatorDetector>com.gs.dmn.transformation.lazy.SparseDecisionDetector</lazyEvaluatorDetector>
                            </lazyEvaluationDetectors>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-example-credit-decision</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <lazyEvaluationDetectors>
                                <lazyEvaluatorDetector>com.gs.dmn.transformation.lazy.SparseDecisionDetector</lazyEvaluatorDetector>
                            </lazyEvaluationDetectors>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>example-credit-decision-with-mixed-time-dialect</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-example-credit-decision-with-mixed-time-dialect</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>example-credit-decision-mixed-tree</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <templateProvider>com.gs.dmn.signavio.transformation.template.KotlinSignavioTreeTemplateProvider</templateProvider>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed_tree</javaRootPackage>
                                <caching>true</caching>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-example-credit-decision-mixed-tree</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <templateProvider>com.gs.dmn.signavio.transformation.template.KotlinSignavioTreeTemplateProvider</templateProvider>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed_tree</javaRootPackage>
                                <caching>true</caching>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>npe-validation2</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.npe_validation_2</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-npe-validation</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.npe_validation_2</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>null-safe-tests</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Null Safe Tests.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.null_safe_tests</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-null-safe-tests</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Null Safe Tests.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Null Safe Tests.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.null_safe_tests</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-polynomial</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Simple Polynomial.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_polynomial</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-polynomial</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Simple Polynomial.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Simple Polynomial.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_polynomial</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-decision-complex-type-inputs-feel-input-entries-single-output-collect-hit-policy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/simple-decision-complex-type-inputs-feel-input-entries-single-output-collect-hit-policy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_complex_type_inputs_feel_input_entries_single_output_collect_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-decision-complex-type-inputs-feel-input-entries-single-output-collect-hit-policy</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/simple-decision-complex-type-inputs-feel-input-entries-single-output-collect-hit-policy.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/simple-decision-complex-type-inputs-feel-input-entries-single-output-collect-hit-policy.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_complex_type_inputs_feel_input_entries_single_output_collect_hit_policy</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- Linked decisions -->
                    <execution>
                        <id>child-linked</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/ChildLinked.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.child_linked</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-child-linked</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/ChildLinked.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/ChildLinked.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.child_linked</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>parent-linked</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/ParentLinked.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.parent_linked</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-parent-linked</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/ParentLinked.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/ParentLinked.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.parent_linked</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>test-zip</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Test ZIP.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.test_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-test-zip</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Test ZIP.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Test ZIP.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.test_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-model</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Simple model.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_model</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-model</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Simple model.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Simple model.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_model</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-mid</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Simple MID.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_mid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-mid</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Simple MID.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Simple MID.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_mid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-mid-legacy</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Simple MID Legacy.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simplemid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-mid-legacy</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Simple MID Legacy.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Simple MID Legacy.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simplemid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- test12 env -->
                    <execution>
                        <id>npevalidation2-test12</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2 Test12.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-npevalidation2-test12</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2 Test12.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/NPEValidation2 Test12.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>linked-mid-via-litext</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/linked MID via LitExp.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model2</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-linked-mid-via-litext</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/linked MID via LitExp.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/linked MID via LitExp.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model2</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

<!--
                    <execution>
                        <id>linked-decision-zip</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Linked decision - Zip.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.linked_decision_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-linked-decision-zip</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Linked decision - Zip.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Linked decision - Zip.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.linked_decision_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
-->

                    <execution>
                        <id>multi-list-output-top-decision</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Multi-List Output top decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model3</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-multi-list-output-top-decision</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Multi-List Output top decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Multi-List Output top decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model3</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>nulls-with-zip-function</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Nulls with zip function.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model4</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-nulls-with-zip-function</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Nulls with zip function.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Nulls with zip function.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model4</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>complex-mid</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Complex MID.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model8</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-complex-mid</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Complex MID.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Complex MID.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.model8</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>execution-analysis-test</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/ExecutionAnalysisTestModel.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.execution_analysis_test</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-execution-analysis-test</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/ExecutionAnalysisTestModel.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/ExecutionAnalysisTestModel.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.execution_analysis_test</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- BKMs -->
                    <execution>
                        <id>simple-decision-with-bkm</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/simple-decision-with-bkm.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_with_bkm</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-decision-with-bkm</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/simple-decision-with-bkm.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/simple-decision-with-bkm.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_with_bkm</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>bkm-from-bkm</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/BKMfromBKM.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_from_bkm</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-bkm-from-bkm</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/BKMfromBKM.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/BKMfromBKM.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_from_bkm</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>bkm-imported-from-mid</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/BKMimportedfromMID.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_imported_from_mid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-bkm-imported-from-mid</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/BKMimportedfromMID.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/BKMimportedfromMID.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_imported_from_mid</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>bkm-with-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/BKMwithLiteralExpression.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_with_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-bkm-with-literal-expression</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/BKMwithLiteralExpression.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/BKMwithLiteralExpression.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.bkm_with_literal_expression</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-bkm-zip</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/SimpleBKMzip.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_bkm_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-simple-bkm-zip</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/SimpleBKMzip.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/SimpleBKMzip.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.simple_bkm_zip</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- Functions -->
                    <execution>
                        <id>simple-decision-with-user-function</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/simple-decision-with-user-function.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_with_user_function</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-decision-with-external-function</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/simple-decision-with-external-function.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_with_external_function</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>simple-decision-with-external-function-complex-type</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/ExternalFunctions.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.sd_with_external_function_complex_type</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>test-diagram</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/TestDecision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.test_decision</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-test-diagram</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/TestDecision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/TestDecision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.test_decision</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>dmn-link-issue-1</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/dmn-link-issue-1.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dmn_link_issue_1</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-dmn-link-issue-1</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/dmn-link-issue-1.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/dmn-link-issue-1.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.dmn_link_issue_1</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>null-complex-type-access</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/NullComplexTypeAccess.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.null_complex_type_access</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-null-complex-type-access</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/NullComplexTypeAccess.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/NullComplexTypeAccess.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.null_complex_type_access</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>string-length</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/StringLength.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.string_length</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-string-length</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/StringLength.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/StringLength.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.string_length</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>large-test-set-junit-validation</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/large-test-set.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.large_test_set</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-large-test-set-junit-validation</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/large-test-set.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/large-test-set.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.large_test_set</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>mid-with-complex-output</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/IteratorExampleReturningMultiple.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.mid_with_complex_output</javaRootPackage>
                            </inputParameters>
                            <dmnTransformers>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.RuleDescriptionTransformer</dmnTransformer>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.SimplifyTypesForMIDTransformer</dmnTransformer>
                            </dmnTransformers>
                        </configuration>
                    </execution>
                    <execution>
                        <id>mid-with-complex-output-test</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/IteratorExampleReturningMultiple.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/IteratorExampleReturningMultiple.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.mid_with_complex_output</javaRootPackage>
                            </inputParameters>
                            <dmnTransformers>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.RuleDescriptionTransformer</dmnTransformer>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.SimplifyTypesForMIDTransformer</dmnTransformer>
                            </dmnTransformers>
                        </configuration>
                    </execution>

                    <execution>
                        <id>type-interface-deserialization</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/TypeInterfaceDeserialization.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.type_interface_deserialization</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-type-interface-deserialization</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/TypeInterfaceDeserialization.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/TypeInterfaceDeserialization.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.type_interface_deserialization</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>missing-definition-transformation</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/credit-decision-missing-definitions.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.missing_definition_transformation</javaRootPackage>
                            </inputParameters>
                            <dmnTransformers>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.RuleDescriptionTransformer</dmnTransformer>
                                <dmnTransformer>
                                    <name>com.gs.dmn.signavio.transformation.MergeInputDataTransformer</name>
                                    <configuration>
                                        <forceMerge>false</forceMerge>
                                    </configuration>
                                </dmnTransformer>
                                <dmnTransformer>
                                    <name>com.gs.dmn.signavio.transformation.GenerateMissingItemDefinitionsTransformer</name>
                                    <configuration>
                                        <!-- TypeRef allows both DMN 1.1 (':') and DMN 1.2 ('.') delimiter -->
                                        <definitions>
                                            <definition>
                                                <name>lendingThreshold</name>
                                                <type>feel:number</type>
                                            </definition>
                                            <definition>
                                                <name>makeCreditDecision</name>
                                                <type>feel.string</type>
                                            </definition>
                                            <definition>
                                                <name>processPriorIssues</name>
                                                <type>feel.number</type>
                                                <isCollection>true</isCollection>
                                            </definition>
                                        </definitions>
                                    </configuration>
                                </dmnTransformer>
                            </dmnTransformers>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-missing-definition-transformation</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/credit-decision-missing-definitions.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/credit-decision-missing-definitions.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.missing_definition_transformation</javaRootPackage>
                            </inputParameters>
                            <dmnTransformers>
                                <dmnTransformer>com.gs.dmn.signavio.transformation.RuleDescriptionTransformer</dmnTransformer>
                                <dmnTransformer>
                                    <name>com.gs.dmn.signavio.transformation.MergeInputDataTransformer</name>
                                    <configuration>
                                        <forceMerge>false</forceMerge>
                                    </configuration>
                                </dmnTransformer>
                                <dmnTransformer>
                                    <name>com.gs.dmn.signavio.transformation.GenerateMissingItemDefinitionsTransformer</name>
                                    <configuration>
                                        <definitions>
                                            <definition>
                                                <name>lendingThreshold</name>
                                                <type>feel.number</type>
                                            </definition>
                                            <definition>
                                                <name>makeCreditDecision</name>
                                                <type>feel:string</type>
                                            </definition>
                                            <definition>
                                                <name>processPriorIssues</name>
                                                <type>feel:number</type>
                                                <isCollection>true</isCollection>
                                            </definition>
                                        </definitions>
                                    </configuration>
                                </dmnTransformer>
                            </dmnTransformers>
                        </configuration>
                    </execution>

                    <execution>
                        <id>decision-with-annotations</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/decision-with-annotations.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.decision_with_annotation</javaRootPackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- Composite DMs -->
                    <execution>
                        <id>composite-example-credit-decision</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <lazyEvaluationDetectors>
                                <lazyEvaluatorDetector>com.gs.dmn.transformation.lazy.SparseDecisionDetector</lazyEvaluatorDetector>
                            </lazyEvaluationDetectors>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.composite_example_credit_decision</javaRootPackage>
                                <samePackage>false</samePackage>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-composite-example-credit-decision</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <lazyEvaluationDetectors>
                                <lazyEvaluatorDetector>com.gs.dmn.transformation.lazy.SparseDecisionDetector</lazyEvaluatorDetector>
                            </lazyEvaluationDetectors>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.composite_example_credit_decision</javaRootPackage>
                                <samePackage>false</samePackage>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <!-- gRPC -->
                    <execution>
                        <id>example-credit-decision-mixed-proto</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-example-credit-decision-mixed-proto</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.json</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/Example credit decision.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.example_credit_decision_mixed_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                            </inputParameters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>date-time-proto</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>dmn-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <templateProvider>com.gs.dmn.signavio.transformation.template.KotlinSignavioTreeTemplateProvider</templateProvider>
                            <inputFileDirectory>${dmn.diagram.folder}/complex/date-time-proto.dmn</inputFileDirectory>
                            <outputFileDirectory>${generated.source.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.date_time_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                                <caching>true</caching>
                            </inputParameters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-date-time-proto</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>testlab-to-kotlin</goal>
                        </goals>
                        <configuration>
                            <dmnDialect>com.gs.dmn.signavio.dialect.MixedJavaTimeKotlinSignavioDMNDialectDefinition</dmnDialect>
                            <templateProvider>com.gs.dmn.signavio.transformation.template.KotlinSignavioTreeTemplateProvider</templateProvider>
                            <inputTestFileDirectory>${dmn.diagram.folder}/complex/date-time-proto.json/</inputTestFileDirectory>
                            <inputModelFileDirectory>${dmn.diagram.folder}/complex/date-time-proto.dmn</inputModelFileDirectory>
                            <outputFileDirectory>${generated.test.code.folder}</outputFileDirectory>
                            <inputParameters>
                                <javaRootPackage>${generated.root.package}.date_time_proto</javaRootPackage>
                                <generateProtoMessages>true</generateProtoMessages>
                                <generateProtoServices>true</generateProtoServices>
                                <protoVersion>proto3</protoVersion>
                                <caching>true</caching>
                            </inputParameters>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>0.6.1</version>
                <configuration>
                    <protocArtifact>com.google.protobuf:protoc:${google.protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:${io.grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
                    <protoSourceRoot>${generated.source.code.folder}/com/gs/dmn/generated/</protoSourceRoot>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-generated-classes-to-classpath</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${generated.source.code.folder}</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-generated-resources-to-classpath</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${generated.dmn.diagram.folder}</directory>
                                    <targetPath>dmn</targetPath>
                                </resource>
                                <resource>
                                    <directory>${generated.source.code.folder}</directory>
                                    <excludes>
                                        <exclude>**/*.java</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-generated-test-classes-to-classpath</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${generated.test.code.folder}</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-generated-test-resources-to-classpath</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${generated.test.code.folder}</directory>
                                    <excludes>
                                        <exclude>**/*.java</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <configuration>
                    <nowarn>true</nowarn>  <!-- Disable warnings -->
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <executions>
                    <!-- Replacing default-compile as it is treated specially by maven -->
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <!-- Replacing default-testCompile as it is treated specially by maven -->
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>java-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>java-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <!-- Do not create jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <phase />
                    </execution>
                </executions>
            </plugin>

            <!-- Do not create sources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <skipSource>true</skipSource>
                </configuration>
            </plugin>

            <!-- Do not create javadocs -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Do not sign module -->
            <plugin>
                <artifactId>maven-gpg-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Do not install module -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- Do not deploy module -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>