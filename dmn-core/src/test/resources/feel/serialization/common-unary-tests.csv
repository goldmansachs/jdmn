input|expected|ast
#
# Any
#
-|-|Any()

#
# Positive unary tests
#
1, 2|1, 2|PositiveUnaryTests(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)))
"e1", "e2"|"e1", "e2"|PositiveUnaryTests(OperatorRange(null,StringLiteral("e1")),OperatorRange(null,StringLiteral("e2")))

#
# Negated positive unary tests
#
not (-1)|not(-1)|NegatedPositiveUnaryTests(PositiveUnaryTests(OperatorRange(null,ArithmeticNegation(NumericLiteral(1)))))
not(1, 2)|not(1, 2)|NegatedPositiveUnaryTests(PositiveUnaryTests(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2))))

#
# Null
#
null|null|PositiveUnaryTests(OperatorRange(null,NullLiteral()))

#
# Expression
#
# Simple expressions
? < 2 + 3|? < 2 + 3|PositiveUnaryTests(ExpressionTest(Relational(<,Name(?),Addition(+,NumericLiteral(2),NumericLiteral(3)))))
count(?) > 2|count(?) > 2|PositiveUnaryTests(ExpressionTest(Relational(>,FunctionInvocation(Name(count) -> PositionalParameters(Name(?))),NumericLiteral(2))))

# In Expressions
? in 1|? in 1|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,NumericLiteral(1)))))
? in <1|? in (< 1)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(<,NumericLiteral(1)))))
? in <=1|? in (<= 1)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(<=,NumericLiteral(1)))))
? in >1|? in (> 1)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(>,NumericLiteral(1)))))
? in >=1|? in (>= 1)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(>=,NumericLiteral(1)))))

# Interval test
? in (1 .. 2)|? in (1 .. 2)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), EndpointsRange(true,NumericLiteral(1),true,NumericLiteral(2)))))
? in (1 .. 2]|? in (1 .. 2]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), EndpointsRange(true,NumericLiteral(1),false,NumericLiteral(2)))))
? in [1 .. 2)|? in [1 .. 2)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), EndpointsRange(false,NumericLiteral(1),true,NumericLiteral(2)))))
? in [1 .. 2]|? in [1 .. 2]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), EndpointsRange(false,NumericLiteral(1),false,NumericLiteral(2)))))

# List test
? in [1, 2]|? in [1, 2]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)))))))
? in [1, 2, 3]|? in [1, 2, 3]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))))))
? in ([1,2,3,4], [1,2,3])|? in ([1, 2, 3, 4], [1, 2, 3])|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)),OperatorRange(null,NumericLiteral(4)))), ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))))))
? in ([[1,2,3,4]], [[1,2,3]])|? in ([[1, 2, 3, 4]], [[1, 2, 3]])|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3),NumericLiteral(4)))), ListTest(ListLiteral(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)))))))
? in [[1,2,3,4], [1,2,3]]|? in [[1, 2, 3, 4], [1, 2, 3]]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3),NumericLiteral(4)),ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)))))))

# List test containing EndpointsRange
? in [[2 .. 4], [1 .. 3]]|? in [[2 .. 4], [1 .. 3]]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(EndpointsRange(false,NumericLiteral(2),false,NumericLiteral(4)),EndpointsRange(false,NumericLiteral(1),false,NumericLiteral(3)))))))
? in [[date("2018-12-05")  ..  date("2018-12-07")], [date("2018-12-10")  ..  date("2018-12-12")]]|? in [[date("2018-12-05") .. date("2018-12-07")], [date("2018-12-10") .. date("2018-12-12")]]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(EndpointsRange(false,DateTimeLiteral(date, "2018-12-05"),false,DateTimeLiteral(date, "2018-12-07")),EndpointsRange(false,DateTimeLiteral(date, "2018-12-10"),false,DateTimeLiteral(date, "2018-12-12")))))))
? in [[time("10:30:05")  ..  time("10:30:07")], [time("10:30:10")  ..  time("10:30:12")]]|? in [[time("10:30:05") .. time("10:30:07")], [time("10:30:10") .. time("10:30:12")]]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(EndpointsRange(false,DateTimeLiteral(time, "10:30:05"),false,DateTimeLiteral(time, "10:30:07")),EndpointsRange(false,DateTimeLiteral(time, "10:30:10"),false,DateTimeLiteral(time, "10:30:12")))))))
? in [[date and time("2018-12-08T10:30:05")  ..  date and time("2018-12-08T10:30:07")], [date and time("2018-12-08T10:30:10")  ..  date and time("2018-12-08T10:30:12")]]|? in [[date and time("2018-12-08T10:30:05") .. date and time("2018-12-08T10:30:07")], [date and time("2018-12-08T10:30:10") .. date and time("2018-12-08T10:30:12")]]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(EndpointsRange(false,DateTimeLiteral(date and time, "2018-12-08T10:30:05"),false,DateTimeLiteral(date and time, "2018-12-08T10:30:07")),EndpointsRange(false,DateTimeLiteral(date and time, "2018-12-08T10:30:10"),false,DateTimeLiteral(date and time, "2018-12-08T10:30:12")))))))
? in [{b: "bar"}, {a: "foo"}]|? in [{"b": "bar"}, {"a": "foo"}]|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), ListTest(ListLiteral(OperatorRange(null,Context(ContextEntry(ContextEntryKey(b) = StringLiteral("bar")))),OperatorRange(null,Context(ContextEntry(ContextEntryKey(a) = StringLiteral("foo")))))))))
? in ({a: "bar"}, {a: "foo"})|? in ({"a": "bar"}, {"a": "foo"})|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,Context(ContextEntry(ContextEntryKey(a) = StringLiteral("bar")))), OperatorRange(null,Context(ContextEntry(ContextEntryKey(a) = StringLiteral("foo")))))))
? in ({a: "bar"}, {a: "baz"})|? in ({"a": "bar"}, {"a": "baz"})|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,Context(ContextEntry(ContextEntryKey(a) = StringLiteral("bar")))), OperatorRange(null,Context(ContextEntry(ContextEntryKey(a) = StringLiteral("baz")))))))

# Compound test
? in (1)|? in 1|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,NumericLiteral(1)))))
? in (1, 2)|? in (1, 2)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,NumericLiteral(1)), OperatorRange(null,NumericLiteral(2)))))
? in (<1, [1 .. 2], [1, 2])|? in ((< 1), [1 .. 2], [1, 2])|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(<,NumericLiteral(1)), EndpointsRange(false,NumericLiteral(1),false,NumericLiteral(2)), ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)))))))
? in (<1, [1 .. 2], 3)|? in ((< 1), [1 .. 2], 3)|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(<,NumericLiteral(1)), EndpointsRange(false,NumericLiteral(1),false,NumericLiteral(2)), OperatorRange(null,NumericLiteral(3)))))

# null test
? in null|? in null|PositiveUnaryTests(ExpressionTest(InExpression(Name(?), OperatorRange(null,NullLiteral()))))

# ? is in the right end side
1 in (?, ?)|1 in (?, ?)|PositiveUnaryTests(ExpressionTest(InExpression(NumericLiteral(1), ExpressionTest(Name(?)), ExpressionTest(Name(?)))))
1 in ?|1 in ?|PositiveUnaryTests(ExpressionTest(InExpression(NumericLiteral(1), ExpressionTest(Name(?)))))

#
# List
#
# Simple type input
[]|[]|PositiveUnaryTests(ListTest(ListLiteral()))
[1]|[1]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)))))
[1, 2]|[1, 2]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)))))
[1, 2, 3]|[1, 2, 3]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))))
[1, null, 3]|[1, null, 3]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NullLiteral()),OperatorRange(null,NumericLiteral(3)))))

# List type input
[1, null, 3]|[1, null, 3]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NullLiteral()),OperatorRange(null,NumericLiteral(3)))))
[1, 2, 3]|[1, 2, 3]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))))
["1", "2", "3"]|["1", "2", "3"]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,StringLiteral("1")),OperatorRange(null,StringLiteral("2")),OperatorRange(null,StringLiteral("3")))))
= [1, 2, 3]|(= [1, 2, 3])|PositiveUnaryTests(OperatorRange(=,ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))
!= [1, 2, 3]|(!= [1, 2, 3])|PositiveUnaryTests(OperatorRange(!=,ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))
? = [1, 2, 3]|? = [1, 2, 3]|PositiveUnaryTests(ExpressionTest(Relational(=,Name(?),ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)))))
? = [1, null, 3]|? = [1, null, 3]|PositiveUnaryTests(ExpressionTest(Relational(=,Name(?),ListLiteral(NumericLiteral(1),NullLiteral(),NumericLiteral(3)))))

#
# Range operator
#
# Simple values (missing operator)
123.56|123.56|PositiveUnaryTests(OperatorRange(null,NumericLiteral(123.56)))
-1|-1|PositiveUnaryTests(OperatorRange(null,ArithmeticNegation(NumericLiteral(1))))
null|null|PositiveUnaryTests(OperatorRange(null,NullLiteral()))||abc"|null||PositiveUnaryTests(OperatorRange(null,NullLiteral()))||abc"|PositiveUnaryTests(OperatorRange(null,StringLiteral("abc")))
true|true|PositiveUnaryTests(OperatorRange(null,BooleanLiteral(true)))
date("2016-08-01")|date("2016-08-01")|PositiveUnaryTests(OperatorRange(null,DateTimeLiteral(date, "2016-08-01")))
time("12:00:00Z")|time("12:00:00Z")|PositiveUnaryTests(OperatorRange(null,DateTimeLiteral(time, "12:00:00Z")))
date and time("2016-08-01T11:00:00Z")|date and time("2016-08-01T11:00:00Z")|PositiveUnaryTests(OperatorRange(null,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))

# List value
list|list|PositiveUnaryTests(OperatorRange(null,Name(list)))
list|list|PositiveUnaryTests(OperatorRange(null,Name(list)))

# Range value
range|range|PositiveUnaryTests(OperatorRange(null,Name(range)))

# Explicit operator
= 123.45|(= 123.45)|PositiveUnaryTests(OperatorRange(=,NumericLiteral(123.45)))
!= 123.45|(!= 123.45)|PositiveUnaryTests(OperatorRange(!=,NumericLiteral(123.45)))
< 123.45|(< 123.45)|PositiveUnaryTests(OperatorRange(<,NumericLiteral(123.45)))
<= 123.45|(<= 123.45)|PositiveUnaryTests(OperatorRange(<=,NumericLiteral(123.45)))
> 123.45|(> 123.45)|PositiveUnaryTests(OperatorRange(>,NumericLiteral(123.45)))
>= 123.45|(>= 123.45)|PositiveUnaryTests(OperatorRange(>=,NumericLiteral(123.45)))
< date("2016-08-01")|(< date("2016-08-01"))|PositiveUnaryTests(OperatorRange(<,DateTimeLiteral(date, "2016-08-01")))
<= date("2016-08-01")|(<= date("2016-08-01"))|PositiveUnaryTests(OperatorRange(<=,DateTimeLiteral(date, "2016-08-01")))
> date("2016-08-01")|(> date("2016-08-01"))|PositiveUnaryTests(OperatorRange(>,DateTimeLiteral(date, "2016-08-01")))
>= date("2016-08-01")|(>= date("2016-08-01"))|PositiveUnaryTests(OperatorRange(>=,DateTimeLiteral(date, "2016-08-01")))
< time("12:00:00Z")|(< time("12:00:00Z"))|PositiveUnaryTests(OperatorRange(<,DateTimeLiteral(time, "12:00:00Z")))
<= time("12:00:00Z")|(<= time("12:00:00Z"))|PositiveUnaryTests(OperatorRange(<=,DateTimeLiteral(time, "12:00:00Z")))
> time("12:00:00Z")|(> time("12:00:00Z"))|PositiveUnaryTests(OperatorRange(>,DateTimeLiteral(time, "12:00:00Z")))
>= time("12:00:00Z")|(>= time("12:00:00Z"))|PositiveUnaryTests(OperatorRange(>=,DateTimeLiteral(time, "12:00:00Z")))
< date and time("2016-08-01T11:00:00Z")|(< date and time("2016-08-01T11:00:00Z"))|PositiveUnaryTests(OperatorRange(<,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))
<= date and time("2016-08-01T11:00:00Z")|(<= date and time("2016-08-01T11:00:00Z"))|PositiveUnaryTests(OperatorRange(<=,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))
> date and time("2016-08-01T11:00:00Z")|(> date and time("2016-08-01T11:00:00Z"))|PositiveUnaryTests(OperatorRange(>,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))
>= date and time("2016-08-01T11:00:00Z")|(>= date and time("2016-08-01T11:00:00Z"))|PositiveUnaryTests(OperatorRange(>=,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))

# List of unary tests
1, 2, 3|1, 2, 3|PositiveUnaryTests(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))

#
# Range endpoint
#
(1 .. 2)|(1 .. 2)|PositiveUnaryTests(EndpointsRange(true,NumericLiteral(1),true,NumericLiteral(2)))
]1 .. 2[|(1 .. 2)|PositiveUnaryTests(EndpointsRange(true,NumericLiteral(1),true,NumericLiteral(2)))
[1 .. 2]|[1 .. 2]|PositiveUnaryTests(EndpointsRange(false,NumericLiteral(1),false,NumericLiteral(2)))

# unary tests with lists
[]|[]|PositiveUnaryTests(ListTest(ListLiteral()))
[]|[]|PositiveUnaryTests(ListTest(ListLiteral()))
[1]|[1]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)))))
[1, 2, 3]|[1, 2, 3]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(null,NumericLiteral(2)),OperatorRange(null,NumericLiteral(3)))))
[1, <2, [3 .. 4]]|[1, (< 2), [3 .. 4]]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(null,NumericLiteral(1)),OperatorRange(<,NumericLiteral(2)),EndpointsRange(false,NumericLiteral(3),false,NumericLiteral(4)))))
[<1, <2]|[(< 1), (< 2)]|PositiveUnaryTests(ListTest(ListLiteral(OperatorRange(<,NumericLiteral(1)),OperatorRange(<,NumericLiteral(2)))))
