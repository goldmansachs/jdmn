# Choose Slim protocol
!define TEST_SYSTEM {slim}

!1 Quantified Expressions
!|FEEL Expression Fixture                                                                                                                                                                                                                                                                                                                                   |
|expression                                       |output?                                                                                                                                                                                                                                                                                                  |
|some i in [1..2] j in [2..3] satisfies i + j > 1 |QuantifiedExpression(some, Iterator(i in ExpressionIteratorDomain(IntervalTest(false,NumericLiteral(1),false,NumericLiteral(2)))),Iterator(j in ExpressionIteratorDomain(IntervalTest(false,NumericLiteral(2),false,NumericLiteral(3)))) -> Relational(>,Addition(+,Name(i),Name(j)),NumericLiteral(1))) |
|every i in [1..2] j in [2..3] satisfies i + j > 1|QuantifiedExpression(every, Iterator(i in ExpressionIteratorDomain(IntervalTest(false,NumericLiteral(1),false,NumericLiteral(2)))),Iterator(j in ExpressionIteratorDomain(IntervalTest(false,NumericLiteral(2),false,NumericLiteral(3)))) -> Relational(>,Addition(+,Name(i),Name(j)),NumericLiteral(1)))|
|some i in [1, 2] j in [2, 3] satisfies i + j > 1 |QuantifiedExpression(some, Iterator(i in ExpressionIteratorDomain(ListLiteral(NumericLiteral(1),NumericLiteral(2)))),Iterator(j in ExpressionIteratorDomain(ListLiteral(NumericLiteral(2),NumericLiteral(3)))) -> Relational(>,Addition(+,Name(i),Name(j)),NumericLiteral(1)))                           |
|every i in [1, 2] j in [2, 3] satisfies i + j > 1|QuantifiedExpression(every, Iterator(i in ExpressionIteratorDomain(ListLiteral(NumericLiteral(1),NumericLiteral(2)))),Iterator(j in ExpressionIteratorDomain(ListLiteral(NumericLiteral(2),NumericLiteral(3)))) -> Relational(>,Addition(+,Name(i),Name(j)),NumericLiteral(1)))                          |
|some i in priceTable1 satisfies i.price > 10     |QuantifiedExpression(some, Iterator(i in ExpressionIteratorDomain(Name(priceTable1))) -> Relational(>,PathExpression(Name(i), price),NumericLiteral(10)))                                                                                                                                                |
|every i in priceTable1 satisfies i.price > 10    |QuantifiedExpression(every, Iterator(i in ExpressionIteratorDomain(Name(priceTable1))) -> Relational(>,PathExpression(Name(i), price),NumericLiteral(10)))                                                                                                                                               |

