# Choose Slim protocol
!define TEST_SYSTEM {slim}

!1 Numeric Functions
!|FEEL Expression Fixture                                                                                                                                                                                                               |
|expression                       |output?                                                                                                                                                                                              |
|list contains([1, 2, 3], 1)      |FunctionInvocation(Name(list contains) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(1)))                                               |
|count([1, 2, 3])                 |FunctionInvocation(Name(count) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                          |
|min([1, 2, 3])                   |FunctionInvocation(Name(min) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                            |
|min(1, 2, 3)                     |FunctionInvocation(Name(min) -> PositionalParameters(NumericLiteral(1), NumericLiteral(2), NumericLiteral(3)))                                                                                       |
|max([1, 2, 3])                   |FunctionInvocation(Name(max) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                            |
|max(1, 2, 3)                     |FunctionInvocation(Name(max) -> PositionalParameters(NumericLiteral(1), NumericLiteral(2), NumericLiteral(3)))                                                                                       |
|sum([1, 2, 3])                   |FunctionInvocation(Name(sum) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                            |
|sum(1, 2, 3)                     |FunctionInvocation(Name(sum) -> PositionalParameters(NumericLiteral(1), NumericLiteral(2), NumericLiteral(3)))                                                                                       |
|mean([1, 2, 3])                  |FunctionInvocation(Name(mean) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                           |
|mean(1, 2, 3)                    |FunctionInvocation(Name(mean) -> PositionalParameters(NumericLiteral(1), NumericLiteral(2), NumericLiteral(3)))                                                                                      |
|and([true, true, false])         |FunctionInvocation(Name(and) -> PositionalParameters(ListLiteral(BooleanLiteral(true),BooleanLiteral(true),BooleanLiteral(false))))                                                                  |
|and(true, true, false)           |FunctionInvocation(Name(and) -> PositionalParameters(BooleanLiteral(true), BooleanLiteral(true), BooleanLiteral(false)))                                                                             |
|and([])                          |FunctionInvocation(Name(and) -> PositionalParameters(ListLiteral()))                                                                                                                                 |
|and(0)                           |FunctionInvocation(Name(and) -> PositionalParameters(NumericLiteral(0)))                                                                                                                             |
|or([true, true, false])          |FunctionInvocation(Name(or) -> PositionalParameters(ListLiteral(BooleanLiteral(true),BooleanLiteral(true),BooleanLiteral(false))))                                                                   |
|or(true, true, false)            |FunctionInvocation(Name(or) -> PositionalParameters(BooleanLiteral(true), BooleanLiteral(true), BooleanLiteral(false)))                                                                              |
|or([])                           |FunctionInvocation(Name(or) -> PositionalParameters(ListLiteral()))                                                                                                                                  |
|or(0)                            |FunctionInvocation(Name(or) -> PositionalParameters(NumericLiteral(0)))                                                                                                                              |
|sublist([1, 2, 3], 1)            |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(1)))                                                     |
|sublist([1, 2, 3], 2)            |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(2)))                                                     |
|sublist([1, 2, 3], 3)            |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(3)))                                                     |
|sublist([1, 2, 3], -1)           |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(1))))                                 |
|sublist([1, 2, 3], -2)           |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(2))))                                 |
|sublist([1, 2, 3], -3)           |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(3))))                                 |
|sublist([1, 2, 3], 0)            |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(0)))                                                     |
|sublist([1, 2, 3], 6)            |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(6)))                                                     |
|sublist([1, 2, 3], 1, 2)         |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(1), NumericLiteral(2)))                                  |
|sublist([1, 2, 3], 2, 1)         |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(2), NumericLiteral(1)))                                  |
|sublist([1, 2, 3],-1,1)          |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(1)), NumericLiteral(1)))              |
|sublist([1, 2, 3],-2,1)          |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(2)), NumericLiteral(1)))              |
|sublist([1, 2, 3],-2,2)          |FunctionInvocation(Name(sublist) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(2)), NumericLiteral(2)))              |
|append([1, 2, 3], 4)             |FunctionInvocation(Name(append) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(4)))                                                      |
|append([1, 2, 3], 4, 5)          |FunctionInvocation(Name(append) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(4), NumericLiteral(5)))                                   |
|concatenate([1, 2, 3], [4, 5, 6])|FunctionInvocation(Name(concatenate) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ListLiteral(NumericLiteral(4),NumericLiteral(5),NumericLiteral(6))))|
|concatenate([1], [2], [3, 4, 5]) |FunctionInvocation(Name(concatenate) -> PositionalParameters(ListLiteral(NumericLiteral(1)), ListLiteral(NumericLiteral(2)), ListLiteral(NumericLiteral(3),NumericLiteral(4),NumericLiteral(5))))    |
|insert before([1, 2, 3], 1, 4)   |FunctionInvocation(Name(insert before) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(1), NumericLiteral(4)))                            |
|insert before([1, 2, 3], -1, 4)  |FunctionInvocation(Name(insert before) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ArithmeticNegation(NumericLiteral(1)), NumericLiteral(4)))        |
|remove([1, 2, 3], 1)             |FunctionInvocation(Name(remove) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(1)))                                                      |
|reverse([1, 2, 3])               |FunctionInvocation(Name(reverse) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                        |
|index of([1, 2, 3], 3)           |FunctionInvocation(Name(index of) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), NumericLiteral(3)))                                                    |
|union([1, 2, 3], [4, 5, 6])      |FunctionInvocation(Name(union) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3)), ListLiteral(NumericLiteral(4),NumericLiteral(5),NumericLiteral(6))))      |
|distinct values([1, 2, 3])       |FunctionInvocation(Name(distinct values) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                |
|flatten([1, 2, 3])               |FunctionInvocation(Name(flatten) -> PositionalParameters(ListLiteral(NumericLiteral(1),NumericLiteral(2),NumericLiteral(3))))                                                                        |
|flatten([1, [2], 3])             |FunctionInvocation(Name(flatten) -> PositionalParameters(ListLiteral(NumericLiteral(1),ListLiteral(NumericLiteral(2)),NumericLiteral(3))))                                                           |
|flatten([1, [[2]], 3])           |FunctionInvocation(Name(flatten) -> PositionalParameters(ListLiteral(NumericLiteral(1),ListLiteral(ListLiteral(NumericLiteral(2))),NumericLiteral(3))))                                              |
|flatten([1, [2, 3]])             |FunctionInvocation(Name(flatten) -> PositionalParameters(ListLiteral(NumericLiteral(1),ListLiteral(NumericLiteral(2),NumericLiteral(3)))))                                                           |