# Choose Slim protocol
!define TEST_SYSTEM {slim}

!1 Unary Tests
!|FEEL Unary Tests Fixture                                                                                                  |
|inputEntry|output?                                                                                                         |
|1, 2      |PositiveUnaryTests(OperatorTest(null,NumericLiteral(1)),OperatorTest(null,NumericLiteral(2)))                   |
|not(-1)   |NegatedUnaryTests(PositiveUnaryTests(OperatorTest(null,ArithmeticNegation(NumericLiteral(1)))))                 |
|not(1, 2) |NegatedUnaryTests(PositiveUnaryTests(OperatorTest(null,NumericLiteral(1)),OperatorTest(null,NumericLiteral(2))))|
|-         |Any()                                                                                                           |

!1 Positive Unary Test
!|FEEL Unary Tests Fixture                                                                                                             |
|inputEntry                              |output?                                                                                      |
|1                                       |PositiveUnaryTests(OperatorTest(null,NumericLiteral(1)))                                     |
|-1                                      |PositiveUnaryTests(OperatorTest(null,ArithmeticNegation(NumericLiteral(1))))                 |
|< 1                                     |PositiveUnaryTests(OperatorTest(<,NumericLiteral(1)))                                        |
|<= 1                                    |PositiveUnaryTests(OperatorTest(<=,NumericLiteral(1)))                                       |
|> 1                                     |PositiveUnaryTests(OperatorTest(>,NumericLiteral(1)))                                        |
|>= 1                                    |PositiveUnaryTests(OperatorTest(>=,NumericLiteral(1)))                                       |
|(1..2)                                  |PositiveUnaryTests(IntervalTest(true,NumericLiteral(1),true,NumericLiteral(2)))              |
|]1..2[                                  |PositiveUnaryTests(IntervalTest(true,NumericLiteral(1),true,NumericLiteral(2)))              |
|[1..2]                                  |PositiveUnaryTests(IntervalTest(false,NumericLiteral(1),false,NumericLiteral(2)))            |
|null                                    |PositiveUnaryTests(NullTest())                                                               |
|date("2016-08-01")                      |PositiveUnaryTests(OperatorTest(null,DateTimeLiteral(date, "2016-08-01")))                   |
|< date("2016-08-01")                    |PositiveUnaryTests(OperatorTest(<,DateTimeLiteral(date, "2016-08-01")))                      |
|<= date("2016-08-01")                   |PositiveUnaryTests(OperatorTest(<=,DateTimeLiteral(date, "2016-08-01")))                     |
|> date("2016-08-01")                    |PositiveUnaryTests(OperatorTest(>,DateTimeLiteral(date, "2016-08-01")))                      |
|>= date("2016-08-01")                   |PositiveUnaryTests(OperatorTest(>=,DateTimeLiteral(date, "2016-08-01")))                     |
|< time("12:00:00Z")                     |PositiveUnaryTests(OperatorTest(<,DateTimeLiteral(time, "12:00:00Z")))                       |
|time("12:00:00Z")                       |PositiveUnaryTests(OperatorTest(null,DateTimeLiteral(time, "12:00:00Z")))                    |
|<= time("12:00:00Z")                    |PositiveUnaryTests(OperatorTest(<=,DateTimeLiteral(time, "12:00:00Z")))                      |
|> time("12:00:00Z")                     |PositiveUnaryTests(OperatorTest(>,DateTimeLiteral(time, "12:00:00Z")))                       |
|>= time("12:00:00Z")                    |PositiveUnaryTests(OperatorTest(>=,DateTimeLiteral(time, "12:00:00Z")))                      |
|date and time("2016-08-01T11:00:00Z")   |PositiveUnaryTests(OperatorTest(null,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))|
|< date and time("2016-08-01T11:00:00Z") |PositiveUnaryTests(OperatorTest(<,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))   |
|<= date and time("2016-08-01T11:00:00Z")|PositiveUnaryTests(OperatorTest(<=,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))  |
|> date and time("2016-08-01T11:00:00Z") |PositiveUnaryTests(OperatorTest(>,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))   |
|>= date and time("2016-08-01T11:00:00Z")|PositiveUnaryTests(OperatorTest(>=,DateTimeLiteral(date and time, "2016-08-01T11:00:00Z")))  |
|duration("P1Y1M")                       |PositiveUnaryTests(OperatorTest(null,DateTimeLiteral(duration, "P1Y1M")))                    |
|< duration("P1Y1M")                     |PositiveUnaryTests(OperatorTest(<,DateTimeLiteral(duration, "P1Y1M")))                       |
|<= duration("P1Y1M")                    |PositiveUnaryTests(OperatorTest(<=,DateTimeLiteral(duration, "P1Y1M")))                      |
|> duration("P1Y1M")                     |PositiveUnaryTests(OperatorTest(>,DateTimeLiteral(duration, "P1Y1M")))                       |
|>= duration("P1Y1M")                    |PositiveUnaryTests(OperatorTest(>=,DateTimeLiteral(duration, "P1Y1M")))                      |
|duration("PT1H1M")                      |PositiveUnaryTests(OperatorTest(null,DateTimeLiteral(duration, "PT1H1M")))                   |
|< duration("PT1H1M")                    |PositiveUnaryTests(OperatorTest(<,DateTimeLiteral(duration, "PT1H1M")))                      |
|<= duration("PT1H1M")                   |PositiveUnaryTests(OperatorTest(<=,DateTimeLiteral(duration, "PT1H1M")))                     |
|> duration("PT1H1M")                    |PositiveUnaryTests(OperatorTest(>,DateTimeLiteral(duration, "PT1H1M")))                      |
|>= duration("PT1H1M")                   |PositiveUnaryTests(OperatorTest(>=,DateTimeLiteral(duration, "PT1H1M")))                     |
|"abc"                                   |PositiveUnaryTests(OperatorTest(null,StringLiteral("abc")))                                  |
|true                                    |PositiveUnaryTests(OperatorTest(null,BooleanLiteral(true)))                                  |

!1 Function Call Test
!|FEEL Unary Tests Fixture                                                                                                                          |
|inputEntry        |output?                                                                                                                         |
|contains(?, "abc")|PositiveUnaryTests(OperatorTest(null,FunctionInvocation(Name(contains) -> PositionalParameters(Name(?), StringLiteral("abc")))))|